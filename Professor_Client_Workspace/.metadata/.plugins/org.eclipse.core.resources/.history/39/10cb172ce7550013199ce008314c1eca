package MainScreen;
import java.awt.Dimension;
import java.awt.Toolkit;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JToolBar;
import javax.swing.UIManager;
import java.awt.SystemColor;
import java.awt.BorderLayout;
import javax.swing.JLabel;
import java.awt.GridLayout;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;

import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JToggleButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JTextField;
import javax.swing.JTextPane;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.io.File;
import java.util.Vector;

import javax.swing.JTabbedPane;
import javax.swing.BoxLayout;

import Communication.Transit;
import Controller.Manager;
import FileTransfer.SendFile;
import FontDialog.FontDialog;
import Join.MainJoinForm;
import ScreenShot.ImageServer;

public class MainFrame extends JFrame implements ActionListener{
	private static final long serialVersionUID = 1L;
	//파일 메뉴
	private JMenu fileMenu = null;						
	private JMenuItem logoutMenuItem = null;	//로그아웃 메뉴아이템
	private JMenuItem exitMenuItem = null;		//프로그램 종료 메뉴아이템
	//채팅 메뉴
	private JMenu chatMenu = null;						
	private JMenuItem createChatRoomMenuItem = null;	//방 만들기 메뉴아이템
	private JMenuItem enterChatRoomMenuItem = null;		//방 입장 메뉴아이템
	private JMenuItem privateChatMenuItem = null;		//1:1 대화 메뉴아이템
	private JMenu mainChatFormMenu = null;				//메인 채팅방 서식 설정 메뉴
	private JMenuItem changeFontMenuItem = null;		//글꼴 바꾸기 메뉴아이템
	private JMenuItem changeColorMenuItem = null;		//색상 바꾸기 메뉴아이템
	private JMenuItem sendNoteMenuItem = null;			//쪽지보내기 메뉴아이템
	//학생관리 메뉴
	private JMenu manageStudentMenu = null;				
	private JMenuItem registerStudentMenuItem = null;	//학생정보 등록 메뉴아이템
	private JMenuItem modifyStudentMenuItem = null;		//학생정보 수정 메뉴아이템
	private JMenuItem deleteStudentMenuItem = null;		//학생정보 삭제 메뉴아이템
	private JMenuItem searchStudentMenuItem = null;		//학생정보 검색 메뉴아이템
	//감시 메뉴
	private JMenu observeMenu = null;					
	private JMenuItem screenShotMenuItem = null;		//스크린 샷 찍기 메뉴아이템
	private JMenuItem observeStudentPCMenuItem = null;	//학생 화면 보기 메뉴아이템
	private JMenuItem setUpObserveMenuItem = null;		//감시 설정 메뉴아이템
	//전송 메뉴
	private JMenu sendMenu = null;							
	private JMenuItem sendFileMenuItem = null;	//파일 보내기
	private JMenuItem sendMailMenuItem = null;	//메일 보내기
	//네트워크 메뉴
	private JMenu networkMenu = null;						
	private JMenuItem showCurrentIpAddressMenuItem = null;	//현재 PC 아이피 주소 보기 메뉴아이템
	private JMenuItem setUpClassRoomMenuItem = null;		//강의실 설정 메뉴아이템
	//보기 메뉴
	private JCheckBoxMenuItem showStudentListCheckMenuItem = null;	//접속자 목록 보기 체크 메뉴아이템
	private JCheckBoxMenuItem showChatListCheckMenuItem = null;		//대화 목록 보기 체크 메뉴아이템
	private JCheckBoxMenuItem showToolBarCheckMenuItem = null;		//툴바보이기 체크 메뉴아이템
	private JCheckBoxMenuItem showStatusBarCheckMenuItem = null; 	//상태표시바 보이기 체크 메뉴아이템
	private JCheckBoxMenuItem showCenterCheckMenuItem = null;		//중앙 화면 보이기 체크 메뉴아이템
	//도움말 메뉴
	private JMenuItem guideProgramMenuItem = null;	//프로그램 안내 메뉴아이템
	private JMenuItem informationMenuItem = null; 	//프로그램 정보 메뉴아이템
	//전체 레이아웃
	private JPanel toolBarPanel = null;		//상단
	private JPanel mainWestPanel = null;	//좌측
	private JPanel mainCenterPanel = null;	//중앙
	private JPanel mainEastPanel = null;	//우측
	private JPanel statusBarPanel = null;	//하단
	//기본 툴바
	private JToggleButton showStudentListToggleButton = null;	//접속자 목록 보기 토글버튼
	private JToggleButton showCenterToggleButton = null;		//중앙 화면 보기 토글버튼
	private JToggleButton showChatListToggleButton = null;		//대화 목록 보기 토글버튼
	private JToggleButton showStatusToggleButton = null;		//상태표시바 보기 토글버튼
	private JButton sendNoteButton = null;			//쪽지보내기 버튼
	private JButton chattingButton = null;			//대화하기 버튼
	private JButton createChatRoomButton = null;	//방 만들기 버튼
	private JButton sendFileButton = null;			//파일보내기 버튼
	private JButton sendEmailButton = null;			//이메일보내기 버튼
	//감시툴바
	private JToolBar observeToolBar = null;		
	private JButton screenShotButton = null;	//스크린 샷 버튼
	private JButton videoButton = null;			//화면 보기 버튼
	//학생관리 툴바
	private JToolBar manageStudentToolBar = null;	
	private JButton registerStudentButton = null;	//학생정보 등록 버튼
	private JButton modifyStudentButton = null;		//학생정보 수정 버튼
	private JButton deleteStudentButton = null;		//학생정보 삭제 버튼
	//학생검색 툴바
	private JToolBar searchStudentToolBar = null;		
	private JLabel searchStudentLabel = null;			//학생검색 레이블
	private JTextField searchStudentTextField = null;	//학생검색 텍스트 필드
	private JButton searchStudentButton = null;			//학생정보 검색 버튼
	//대기실 대화방
	private JList<String> chatRoomList = null;					//대화방 리스트
	private JTextPane contentOfChattingTextPane = null;			//대화내용
	private JComboBox<String> connectedStudentComboBox = null;	//접속자 목록 콤보박스
	private JTextField inputTextField = null;					//대화 내용 입력 텍스트 필드
	private JButton sendTextButton = null;						//보내기 버튼
	//접속자 목록
	private JList<String> connectedStudentList = null;				//접속자 리스트
	private JTextField numberOfConnectedStudentTextField = null;	//접속자 수 텍스트 필드
	private JList<String> informationOfConnectedStudentList = null; //접속자 정보
	//접속자 목록 팝업 메뉴
	private JPopupMenu connectorListPopUpMenu = null;
	private JMenuItem privateChatPopUpMenuItem = null;		//1:1 대화
	private JMenuItem sendNotePopUpMenuItem = null;			//쪽지보내기
	private JMenuItem sendFilePopUpMenuItem = null;			//파일보내기
	private JMenuItem screenShotPopUpMenuItem = null;		//스크린 샷 찍기
	private JMenuItem seeMovingImagePopUpMenuItem = null;	//연속 화면 보기
	private JMenuItem remoteControlPopUpMenuItem = null;	//원격 제어
	
	private JTabbedPane mainCenterTabbedPane = null;	//중앙 탭화면
	private final String TITLE = "Professor Supporter";	//프레임창 제목
	private JPanel contentPane = null;			//컨텐츠 영역
	private JLabel statusBarLabel = null;		//상태표시바 레이블
	private Manager manager = new Manager();	//컨트롤러 생성
	
	private String roomName = null;	//선택된 방 이름
	private String fontName = null;	//폰트 이름
	private int fontSize = 0;		//폰트 크기
	private int fontColor = 0;		//폰트 색깔
	private String toUser = null;	//귓속말 받을 사람
	private String selectedId = null;	//선택한 유저
	public ComputerScreen computerScreen = null;	//메인 중앙 컴퓨터 배치 화면
	
	//생성자
	public MainFrame() {
		this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);	//최대화 상태로 프레임창 표시
		this.setIconImage(new ImageIcon(".\\image\\학사모.png").getImage());		//프레임 이미지
		this.setTitle(TITLE);		//프레임창 제목
		this.setSize(1360, 720); 	//프레임 사이즈
		this.displayCenter();		//프레임 위치
		this.createMenu();			//메뉴 생성
		this.initializeMember();	//멤버 변수 초기화
		this.createToolBar();		//상단-툴바 생성
		this.createStatusBar();		//하단-상태표시바 생성
		this.createConnectorList();	//좌측-접속자 목록 생성
		this.createCenterScreen();	//중앙-화면 생성
		this.createChatList();		//우측-대화 목록 생성
		this.createPopUpMenu();		//팝업 메뉴 생성
		this.mountEventHandler();	//이벤트 처리기 등록
		new ImageServer().start();
	} //생성자 끝

	//멤버 변수 초기화 및 설정
	private void initializeMember(){
		this.contentPane = new JPanel();
		this.fontName = "바탕";
		this.fontSize = 12;
		this.fontColor = Color.BLACK.getRGB();
		this.toUser = "모두에게";
		this.setContentPane(contentPane);
	} //멤버 변수 초기화 및 설정 함수 끝

	//화면 중앙 표시
	private void displayCenter(){
		//화면의 크기
		Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();	
		//프레임의 크기
		Dimension frameDimension = this.getSize();
		//화면 넓이/2 - 프레임 넓이/2
		int xPosition = (int)(screenDimension.getWidth()/2 - frameDimension.getWidth()/2);
		//화면 높이/2 - 프레임 높이/2
		int yPosition = (int)(screenDimension.getHeight()/2 - frameDimension.getHeight()/2) - 20;
		this.setLocation(xPosition, yPosition);
	} //화면 중앙 표시 함수 끝
	
	//선택된 방이름 가져오기
	public String getSelectedRoomName(){
		return roomName;
	}
	//대화 내용 가져오기
	public JTextPane getChatContent(){
		return contentOfChattingTextPane;
	}
	//접속자 목록 콤보박스 가져오기
	public JComboBox<String> getConnectedStudentComboBox(){
		return connectedStudentComboBox;
	}
	//접속자 목록 가져오기
	public JList<String> getConnectedStudentList(){
		return connectedStudentList;
	}
	//대화방 목록 가져오기
	public JList<String> getChatRoomList(){
		return chatRoomList;
	}
	//접속자 수 텍스트 필드 가져오기
	public JTextField getNumberOfConnector(){
		return numberOfConnectedStudentTextField;
	}
	//중앙 화면 탭 패인 가져오기
	public JTabbedPane getTabbedPane(){
		return mainCenterTabbedPane;
	}
	
	//폰트 이름 설정
	public void setFontName(String fontName){
		this.fontName = fontName;
	}
	//폰트 크기설정
	public void setFontSize(int fontSize){
		this.fontSize = fontSize;
	}
	//폰트 색상설정
	public void setFontColor(int fontColor){
		this.fontColor = fontColor;
	}

	//이벤트 처리기 등록
	private void mountEventHandler(){
		//파일메뉴
		logoutMenuItem.addActionListener(this);
		exitMenuItem.addActionListener(this);	
		//채팅메뉴
		createChatRoomMenuItem.addActionListener(this);
		enterChatRoomMenuItem.addActionListener(this);
		privateChatMenuItem.addActionListener(this);
		changeFontMenuItem.addActionListener(this);
		changeColorMenuItem.addActionListener(this);
		sendNoteMenuItem.addActionListener(this);
		//전송 메뉴
		sendFileMenuItem.addActionListener(this);
		sendMailMenuItem.addActionListener(this);
		//감시 메뉴
		screenShotMenuItem.addActionListener(this);
		observeStudentPCMenuItem.addActionListener(this);
		setUpObserveMenuItem.addActionListener(this);
		//보기메뉴
		showToolBarCheckMenuItem.addActionListener(this);
		showChatListCheckMenuItem.addActionListener(this);
		showStudentListCheckMenuItem.addActionListener(this);
		showStatusBarCheckMenuItem.addActionListener(this);		
		showCenterCheckMenuItem.addActionListener(this);
		//학생관리
		registerStudentMenuItem.addActionListener(this);
		modifyStudentMenuItem.addActionListener(this);	
		deleteStudentMenuItem.addActionListener(this);	
		searchStudentMenuItem.addActionListener(this);
		//네트워크 메뉴
		showCurrentIpAddressMenuItem.addActionListener(this);
		setUpClassRoomMenuItem.addActionListener(this);
		//기본 툴바
		showCenterToggleButton.addActionListener(this);
		showChatListToggleButton.addActionListener(this);
		showStudentListToggleButton.addActionListener(this);
		showStatusToggleButton.addActionListener(this);
		sendNoteButton.addActionListener(this);
		chattingButton.addActionListener(this);
		createChatRoomButton.addActionListener(this);
		sendFileButton.addActionListener(this);
		sendEmailButton.addActionListener(this);
		//감시 툴바
		screenShotButton.addActionListener(this);
		videoButton.addActionListener(this);
		//학생관리 툴바
		registerStudentButton.addActionListener(this);  
		modifyStudentButton.addActionListener(this);
		deleteStudentButton.addActionListener(this);
		//학생검색 툴바
		searchStudentButton.addActionListener(this);
		//도움말 메뉴
		guideProgramMenuItem.addActionListener(this);
		informationMenuItem.addActionListener(this);
		//접속자 목록 팝업 메뉴
		sendNotePopUpMenuItem.addActionListener(this); 
		privateChatPopUpMenuItem.addActionListener(this);   
		sendFilePopUpMenuItem.addActionListener(this);
		screenShotPopUpMenuItem.addActionListener(this);
		seeMovingImagePopUpMenuItem.addActionListener(this);
		remoteControlPopUpMenuItem.addActionListener(this);
		//메시지 전송 창에서 엔터키에 대한 이벤트
		inputTextField.addActionListener(this);
		sendTextButton.addActionListener(this);
		connectedStudentComboBox.addActionListener(this);
		//X버튼 눌렀을 때 수행
		this.addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent we){
				System.out.println("[메인화면] X 버튼 클릭");
				MainFrame.this.exit();
			}
		});
		//프레임의 X를 눌렀을 때 아무런 동작을 안함
		//this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		//대화방 리스트
		chatRoomList.addMouseListener(new MouseAdapter(){
			public void mousePressed(MouseEvent e){
				//방을 선택하고 마우스 오른쪽버튼을 눌렀을 때만 발생
				if(e.getButton() == MouseEvent.BUTTON3 && !chatRoomList.isSelectionEmpty()){
					//방 이름 세팅
					roomName = (String)chatRoomList.getSelectedValue();
					//비번방이면 방이름에서 [비번]제거
					if(roomName.startsWith("[비번]")){
						roomName = roomName.substring(roomName.indexOf("]") + 2);
					}
					//방이름에서 현재 인원수와 제한인원수 표시 제거(1\2)
					roomName = roomName.substring(0, roomName.indexOf("("));
					//서버에 Flag정보 날
					Transit.sendMsg("방정보/" + roomName);
				}
			}
		});
		//접속자 리스트
		connectedStudentList.addMouseListener(new MouseAdapter(){
			public void mousePressed(MouseEvent e){
				//유저를 선택하고 마우스 오른쪽버튼을 눌렀을 때만 발생
				if(e.getButton() == MouseEvent.BUTTON3 && !connectedStudentList.isSelectionEmpty()){
					//선택한 유저를 담기
					selectedId = connectedStudentList.getSelectedValue().toString();
					//팝업 띄우기
					connectorListPopUpMenu.show(e.getComponent(), e.getX(), e.getY());
				}
			}
		});
	} //이벤트 처리기 등록 함수 끝

	//메시지 입력창에 메시지를 입력하고 엔터나 버튼 눌렀을 경우 수행
	private void sendMessage(){
		String message = inputTextField.getText();
		if(message.length() == 0){
			message = " ";
		}
		Transit.sendMsg("대기실대화/" + message + "/" + fontName + "/" + fontSize + "/" + fontColor + "/" + toUser);
		inputTextField.setText("");
	}

	//이벤트 처리기
	public void actionPerformed(ActionEvent e){
		//프로그램 정보 메뉴아이템
		if(e.getSource() == informationMenuItem){
			//메시지 대화상자 표시(어떤 것의 중앙, 메시지, 타이틀, 메시지대화유형)
			JOptionPane.showMessageDialog(this, "Professor Supporter\n구동완이 제작한 프로그램입니다.", 
												"프로그램 정보", JOptionPane.INFORMATION_MESSAGE);
		}
		//종료 메뉴아이템
		else if(e.getSource() == exitMenuItem){
			this.exit();
		}
		//상태표시바 보이기 메뉴아이템이나 토글버튼
		else if(e.getSource() == showStatusBarCheckMenuItem || e.getSource() == showStatusToggleButton){
			if (statusBarPanel.isVisible()) {
				statusBarPanel.setVisible(false);
				showStatusToggleButton.setSelected(false);
				showStatusBarCheckMenuItem.setSelected(false);
			} else {
				statusBarPanel.setVisible(true);
				showStatusToggleButton.setSelected(true);
				showStatusBarCheckMenuItem.setSelected(true);
			}
		}
		//중앙 화면 보이기 메뉴아이템이나 토글버튼
		else if(e.getSource() == showCenterCheckMenuItem || e.getSource() == showCenterToggleButton){
			if (mainCenterPanel.isVisible()) {
				mainCenterPanel.setVisible(false);
				showCenterToggleButton.setSelected(false);  
				showCenterCheckMenuItem.setSelected(false);
			} else {
				mainCenterPanel.setVisible(true);
				showCenterToggleButton.setSelected(true);
				showCenterCheckMenuItem.setSelected(true);
			}
		}
		//접속자 목록 보이기 메뉴아이템이나 토글버튼
		else if(e.getSource() == showStudentListToggleButton || e.getSource() == showStudentListCheckMenuItem)
		{
			if (mainWestPanel.isVisible()) {
				mainWestPanel.setVisible(false);
				showStudentListToggleButton.setSelected(false);
				showStudentListCheckMenuItem.setSelected(false);
			} else {
				mainWestPanel.setVisible(true);
				showStudentListToggleButton.setSelected(true);
				showStudentListCheckMenuItem.setSelected(true);
			}
		}
		//대확 목록 보이기 메뉴아이템이나 토글버튼
		else if(e.getSource() == showChatListToggleButton || e.getSource() == showChatListCheckMenuItem){
			if (mainEastPanel.isVisible()) {
				mainEastPanel.setVisible(false);
				showChatListToggleButton.setSelected(false);
				showChatListCheckMenuItem.setSelected(false);
			} else {
				mainEastPanel.setVisible(true);
				showChatListToggleButton.setSelected(true);
				showChatListCheckMenuItem.setSelected(true);
			}
		}
		//툴바 보이기 메뉴아이템
		else if(e.getSource() == showToolBarCheckMenuItem){
			if (toolBarPanel.isVisible()) {
				toolBarPanel.setVisible(false);
			} else {
				toolBarPanel.setVisible(true);
			}
		}
		//대화방 입장하기 메뉴아이템
		else if(e.getSource() == enterChatRoomMenuItem){
			//방을 선택 안했을 경우 수행
			if(chatRoomList.isSelectionEmpty()){
				JOptionPane.showMessageDialog(this, "입장할 방을 선택해 주시기 바랍니다.", "참가 에러", JOptionPane.WARNING_MESSAGE);
			}
			//방을 선택 했을 경우 수행
			else{
				//선택한 방 이름 세팅
				roomName = (String)chatRoomList.getSelectedValue();
				//방이름에서 현재 인원수와 제한인원수 표시 제거(1\2)
				roomName = roomName.substring(0, roomName.indexOf("("));
				//컨트롤러에 키값 전송
				manager.service("JoinRoom");
			}
		}
		//대화방 만들기 메뉴아이템이나 토글 버튼
		else if(e.getSource() == createChatRoomMenuItem || e.getSource() == createChatRoomButton){
			Manager.MAKEROOMFORM.setVisible(true);
		}
		//1:1대화 메뉴아이템
		else if(e.getSource() == privateChatMenuItem){
			Transit.sendMsg("전체유저/1:1대화/");
		}
		//쪽지 메뉴아이템
		else if(e.getSource() == sendNoteMenuItem){
			Transit.sendMsg("전체유저/쪽지/");
		}
		//글꼴 바꾸기 메뉴아이템
		else if(e.getSource() == changeFontMenuItem){
			FontDialog fontChooser = new FontDialog();
			//폰트 다이얼로그 띄움
			int result = fontChooser.showDialog(this);
			//확인 버튼 눌렀을 경우 수행
			if (result == FontDialog.OK_OPTION){
				//선택한 폰트 세팅
				Font font = fontChooser.getSelectedFont(); 
				//폰트 선택 안 된 경우 빠져나감
				if(font == null){
					return;
				}
				//폰트 이름 세팅
				fontName = fontChooser.getSelectedFontFamily();
				//폰트 크기 세팅
				fontSize = fontChooser.getSelectedFontSize();
			}
		}
		//색상 바꾸기 메뉴아이템
		else if(e.getSource() == changeColorMenuItem){
			fontColor = JColorChooser.showDialog(this, "글자색", this.contentOfChattingTextPane.getForeground()).getRGB();
		}
		//파일 보내기 메뉴아이템이나 토글버튼
		else if(e.getSource() == sendFileMenuItem || e.getSource() == sendFileButton){
			Transit.sendMsg("전체유저/파일 보내기/");
		}
		//메시지 전송 창에서 엔터키
		else if(e.getSource() == inputTextField){
			this.sendMessage();
		}
		//메시지 보내는 버튼
		else if(e.getSource() == sendTextButton){
			this.sendMessage();
		}
		//로그아웃 메뉴아이템
		else if(e.getSource() == logoutMenuItem){
			//로그아웃 여부 묻는 다이얼로그 띄움
			int x = JOptionPane.showConfirmDialog(this, "정말 로그 아웃 하시겠습니까?", 
					"Logout", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
			//확인 눌렀을 때 수행
			if(x == JOptionPane.OK_OPTION){
				//대화창 리셋
				this.contentOfChattingTextPane.setText("");
				//대기실 폼 안보이게 함
				this.setVisible(false);
				//대기실 폼 자원해제
				this.dispose();
				//컨트롤러에 키값 전송
				manager.service("Logout");
			}
		}
		//접속자 목록 콤보박스
		else if(e.getSource() == connectedStudentComboBox){
			//선택한 유저 세팅
			toUser = this.connectedStudentComboBox.getSelectedItem().toString();
		}
		//팝업메뉴의 쪽지 보내기
		else if(e.getSource() == sendNotePopUpMenuItem){
			//메시지 입력받는 다이얼로그 띄움
			String msg = JOptionPane.showInputDialog("메시지를 입력하십시오.");
			//아무것도 입력 안했을 경우 수행
			if(msg.length() == 0){
				JOptionPane.showMessageDialog(this, "메시지를 입력해 주십시오.", "쪽지 에러", JOptionPane.WARNING_MESSAGE);
			}
			//입력 한 경우 수행
			else{
				Transit.sendMsg("쪽지/" + msg + "/" + this.selectedId);
			}
		}
		//팝업 메뉴의 1:1 대화
		else if(e.getSource() == privateChatPopUpMenuItem){
			Transit.sendMsg("1:1대화요청/" + selectedId);
		}
		//팝업 메뉴의 파일 보내기
		else if(e.getSource() == sendFilePopUpMenuItem){
			//선택한 유저 세팅
			//String selectedId = this.connectedStudentList.getSelectedValue().toString();
			JFileChooser fileOpen = new JFileChooser("C:\\");
			fileOpen.showOpenDialog(this);
			File fileName = fileOpen.getSelectedFile();

			if(fileName == null){
				JOptionPane.showMessageDialog(fileOpen, "전송할 파일을 선택해 주시기 바랍니다.", "File Send Error", JOptionPane.WARNING_MESSAGE);
			}
			else{
				new SendFile(Manager.MAINFRAME, fileName);
				Transit.sendMsg("파일전송/" + selectedId);
			}
		}
		//팝업 메뉴의 스크린 샷 찍기
		else if(e.getSource() == screenShotPopUpMenuItem){
			Transit.sendMsg("스크린샷요청/" + selectedId);
		}
		//팝업 메뉴의 연속 화면 보기
		else if(e.getSource() == seeMovingImagePopUpMenuItem){
			Transit.sendMsg("연속화면요청/" + selectedId);
		}
		//팝업 메뉴의 원격 제어
		else if(e.getSource() == remoteControlPopUpMenuItem){
			Transit.sendMsg("원격제어요청/" + selectedId);
		}
		//학생정보 등록 메뉴아이템과 툴바 버튼
		else if(e.getSource() == registerStudentMenuItem || e.getSource() == registerStudentButton){
			mainCenterTabbedPane.addTab("학생정보 등록", Manager.MAINJOINFORM);
		}
		//학생정보 등록 메뉴아이템과 툴바 버튼
		else if(e.getSource() == registerStudentMenuItem || e.getSource() == registerStudentButton){
			mainCenterTabbedPane.addTab("학생정보 등록", Manager.MAINJOINFORM);
		}
	} 

	//종료 처리
	private void exit(){
		//정말 종료할건지 물어보는 다이얼로그
		int x = JOptionPane.showConfirmDialog(this, "정말 끝내시겠습니까?", "Quit", JOptionPane.OK_CANCEL_OPTION, 
				JOptionPane.QUESTION_MESSAGE);
		//확인 버튼 눌렀을 때 수행
		if(x == JOptionPane.OK_OPTION){
			//Flag 정보 Out 전송
			manager.service("Logout");
			//프로그램 종료
			System.exit(0);
		}
	}
	
	//팝업 메뉴 생성
	private void createPopUpMenu(){
		//팝업 메뉴 생성
		connectorListPopUpMenu = new JPopupMenu();
		sendNotePopUpMenuItem = new JMenuItem("쪽지 보내기");  
		privateChatPopUpMenuItem = new JMenuItem("1:1 대화");    
		sendFilePopUpMenuItem = new JMenuItem("파일 보내기"); 
		screenShotPopUpMenuItem = new JMenuItem("스크린 샷 찍기");
		seeMovingImagePopUpMenuItem = new JMenuItem("연속 화면 보기");
		remoteControlPopUpMenuItem = new JMenuItem("원격 제어");

		//팝업 메뉴에 메뉴아이템 집어 넣기
		connectorListPopUpMenu.add(sendNotePopUpMenuItem);
		connectorListPopUpMenu.add(privateChatPopUpMenuItem);
		connectorListPopUpMenu.add(sendFilePopUpMenuItem);
		connectorListPopUpMenu.add(screenShotPopUpMenuItem);
		connectorListPopUpMenu.add(seeMovingImagePopUpMenuItem);
		connectorListPopUpMenu.addSeparator();
		connectorListPopUpMenu.add(remoteControlPopUpMenuItem);
		
		//접속자 리스트에 팝업 메뉴 추가
		connectedStudentList.add(connectorListPopUpMenu);
	} //팝업 메뉴 생성 함수 끝
	
	//메뉴 생성
	private void createMenu(){
		//메뉴바 생성
		JMenuBar menuBar = new JMenuBar();
		this.setJMenuBar(menuBar);
		
		//파일 메뉴
		fileMenu = new JMenu("파일");
		menuBar.add(fileMenu);
		logoutMenuItem = new JMenuItem("로그 아웃");
		fileMenu.add(logoutMenuItem);
		fileMenu.addSeparator();
		fileMenu.addSeparator();
		exitMenuItem = new JMenuItem("프로그램 종료");
		exitMenuItem.setIcon(new ImageIcon(".\\image\\종료(23x20).jpg"));
		fileMenu.add(exitMenuItem);
		
		//채팅메뉴
		chatMenu = new JMenu("채팅");
		menuBar.add(chatMenu);
		createChatRoomMenuItem = new JMenuItem("대화방 만들기");
		createChatRoomMenuItem.setIcon(new ImageIcon(".\\image\\방만들기메뉴(23x20).jpg"));
		chatMenu.add(createChatRoomMenuItem);
		enterChatRoomMenuItem = new JMenuItem("대화방 입장하기");
		chatMenu.add(enterChatRoomMenuItem);
		privateChatMenuItem	= new JMenuItem("1:1대화");
		chatMenu.add(privateChatMenuItem);
		chatMenu.addSeparator();
		mainChatFormMenu = new JMenu("메인 대화방 서식 설정");
		chatMenu.add(mainChatFormMenu);
		changeFontMenuItem = new JMenuItem("글꼴 바꾸기");
		mainChatFormMenu.add(changeFontMenuItem);
		changeColorMenuItem = new JMenuItem("색상 바꾸기");
		mainChatFormMenu.add(changeColorMenuItem);
		chatMenu.addSeparator();
		chatMenu.addSeparator();
		sendNoteMenuItem = new JMenuItem("쪽지보내기");
		sendNoteMenuItem.setIcon(new ImageIcon(".\\image\\쪽지보내기메뉴(23x20).jpg"));
		chatMenu.add(sendNoteMenuItem);
		
		//전송메뉴
		sendMenu = new JMenu("전송");
		menuBar.add(sendMenu);
		sendFileMenuItem = new JMenuItem("파일 보내기");
		sendMenu.add(sendFileMenuItem);
		sendMenu.addSeparator();
		sendMenu.addSeparator();
		sendMailMenuItem = new JMenuItem("메일 보내기");
		sendMenu.add(sendMailMenuItem);
		
		//감시메뉴
		observeMenu = new JMenu("감시");
		menuBar.add(observeMenu);
		screenShotMenuItem = new JMenuItem("학생PC 스크린샷 찍기");
		observeMenu.add(screenShotMenuItem);
		observeStudentPCMenuItem = new JMenuItem("학생PC 화면 보기");
		observeMenu.add(observeStudentPCMenuItem);
		observeMenu.addSeparator();
		setUpObserveMenuItem = new JMenuItem("감시 설정");
		observeMenu.add(setUpObserveMenuItem);
		
		//보기 메뉴
		JMenu viewMenu = new JMenu("보기");
		menuBar.add(viewMenu);
		showToolBarCheckMenuItem = new JCheckBoxMenuItem("툴바 보이기");
		viewMenu.add(showToolBarCheckMenuItem);
		viewMenu.addSeparator();
		showCenterCheckMenuItem = new JCheckBoxMenuItem("컴퓨터 배치화면 보이기");
		viewMenu.add(showCenterCheckMenuItem);
		showStudentListCheckMenuItem = new JCheckBoxMenuItem("접속한 학생 목록 보이기");
		viewMenu.add(showStudentListCheckMenuItem);
		showChatListCheckMenuItem = new JCheckBoxMenuItem("대화방 목록 보이기");
		viewMenu.add(showChatListCheckMenuItem); 
		viewMenu.addSeparator();
		showStatusBarCheckMenuItem = new JCheckBoxMenuItem("상태표시바 보이기");
		viewMenu.add(showStatusBarCheckMenuItem);
		//선택된 상태로 설정
		JMenuItem[] menuItem = {showToolBarCheckMenuItem, showCenterCheckMenuItem, showStudentListCheckMenuItem,
								showChatListCheckMenuItem, showStatusBarCheckMenuItem};
		for(int i=0; i<menuItem.length; i++){
			menuItem[i].setSelected(true);
		}
		
		//학생관리 메뉴
		manageStudentMenu = new JMenu("학생관리");
		menuBar.add(manageStudentMenu);
		registerStudentMenuItem = new JMenuItem("학생정보 등록");
		registerStudentMenuItem.setIcon(new ImageIcon(".\\image\\학생등록메뉴(23x20).jpg"));
		manageStudentMenu.add(registerStudentMenuItem);
		manageStudentMenu.addSeparator();
		modifyStudentMenuItem = new JMenuItem("학생정보 수정");
		manageStudentMenu.add(modifyStudentMenuItem);
		deleteStudentMenuItem = new JMenuItem("학생정보 삭제");
		deleteStudentMenuItem.setIcon(new ImageIcon(".\\image\\학생삭제메뉴(23x20).jpg"));
		manageStudentMenu.add(deleteStudentMenuItem);
		manageStudentMenu.addSeparator();
		searchStudentMenuItem = new JMenuItem("학생정보 검색");
		manageStudentMenu.add(searchStudentMenuItem);
		
		//네트워크
		networkMenu = new JMenu("네트워크");
		menuBar.add(networkMenu);
		showCurrentIpAddressMenuItem = new JMenuItem("현재 IP주소 보기");
		networkMenu.add(showCurrentIpAddressMenuItem);
		setUpClassRoomMenuItem = new JMenuItem("강의실 설정");
		networkMenu.add(setUpClassRoomMenuItem);
		
		//도움말 메뉴
		JMenu helpMenu = new JMenu("도움말");
		menuBar.add(helpMenu);
		guideProgramMenuItem = new JMenuItem("프로그램 사용 안내");
		helpMenu.add(guideProgramMenuItem);
		helpMenu.addSeparator();
		informationMenuItem = new JMenuItem("프로그램 정보");
		informationMenuItem.setIcon(new ImageIcon(".\\image\\정보(23x20).jpg"));
		helpMenu.add(informationMenuItem);
	} //메뉴 생성 함수 끝
	
	//툴바 생성
	private void createToolBar(){
		//컨텐츠 영역 전체 레이아웃
		contentPane.setLayout(new BorderLayout(0, 0));
		
		toolBarPanel = new JPanel();
		toolBarPanel.setBorder(new EtchedBorder(EtchedBorder.RAISED, null, null));
		contentPane.add(toolBarPanel, BorderLayout.NORTH);
		toolBarPanel.setLayout(new BoxLayout(toolBarPanel, BoxLayout.X_AXIS));
		JToolBar standardToolBar = new JToolBar();
		toolBarPanel.add(standardToolBar);
		standardToolBar.setBackground(SystemColor.controlHighlight);

		showStudentListToggleButton = new JToggleButton( new ImageIcon(".\\image\\목록보기(25x22).jpg"));
		standardToolBar.add(showStudentListToggleButton);
		showCenterToggleButton = new JToggleButton(new ImageIcon(".\\image\\컴퓨터보기(25x22).jpg"));
		standardToolBar.add(showCenterToggleButton);
		showChatListToggleButton = new JToggleButton(new ImageIcon(".\\image\\채팅보이기(25x22).jpg"));
		standardToolBar.add(showChatListToggleButton);
		showStatusToggleButton = new JToggleButton(new ImageIcon(".\\image\\상태표시보기(25x22).jpg"));
		standardToolBar.add(showStatusToggleButton);
		standardToolBar.add(new JLabel(new ImageIcon(".\\image\\구분자(3x26).jpg")));
		sendNoteButton = new JButton(new ImageIcon(".\\image\\쪽지(25x22).jpg"));
		standardToolBar.add(sendNoteButton);
		chattingButton = new JButton(new ImageIcon(".\\image\\채팅(25x22).jpg"));
		standardToolBar.add(chattingButton);
		createChatRoomButton = new JButton(new ImageIcon(".\\image\\방만들기(25x22).jpg"));
		standardToolBar.add(createChatRoomButton);
		standardToolBar.add(new JLabel(new ImageIcon(".\\image\\구분자(3x26).jpg")));
		sendFileButton = new JButton(new ImageIcon(".\\image\\파일보내기(25x22).jpg"));
		standardToolBar.add(sendFileButton);
		sendEmailButton = new JButton(new ImageIcon(".\\image\\이메일보내기(25x22).jpg"));
		standardToolBar.add(sendEmailButton);
		//선택된 상태로 설정
		JToggleButton[] toggleButton= {showStudentListToggleButton, showCenterToggleButton, showChatListToggleButton, showStatusToggleButton};
		for(int i=0; i<toggleButton.length; i++){
			toggleButton[i].setSelected(true);
		}

		observeToolBar = new JToolBar();
		toolBarPanel.add(observeToolBar);
		screenShotButton = new JButton(new ImageIcon(".\\image\\카메라찍기(25x22).jpg"));
		observeToolBar.add(screenShotButton);
		videoButton = new JButton(new ImageIcon(".\\image\\비디오(25x22).jpg"));
		observeToolBar.add(videoButton);

		manageStudentToolBar = new JToolBar();
		toolBarPanel.add(manageStudentToolBar);
		registerStudentButton = new JButton(new ImageIcon(".\\image\\개인정보보기(25x22).jpg"));
		manageStudentToolBar.add(registerStudentButton);
		modifyStudentButton = new JButton(new ImageIcon(".\\image\\학생정보수정(25x22).jpg"));
		manageStudentToolBar.add(modifyStudentButton);
		deleteStudentButton = new JButton(new ImageIcon(".\\image\\학생정보삭제(25x22).jpg"));
		manageStudentToolBar.add(deleteStudentButton);

		JToolBar blankToolBar = new JToolBar();
		toolBarPanel.add(blankToolBar);
		blankToolBar.add(new JLabel("　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"));

		searchStudentToolBar = new JToolBar();
		toolBarPanel.add(searchStudentToolBar);
		searchStudentLabel = new JLabel("학생검색 : ");
		searchStudentToolBar.add(searchStudentLabel);
		searchStudentTextField = new JTextField();
		searchStudentToolBar.add(searchStudentTextField);
		searchStudentTextField.setColumns(10);
		searchStudentButton = new JButton(new ImageIcon(".\\image\\사람검색(25x22).jpg"));
		searchStudentToolBar.add(searchStudentButton);
	} //툴바 생성 함수 끝
	
	//상태표시바 생성
	private void createStatusBar(){
		statusBarPanel = new JPanel();
		statusBarPanel.setBorder(new EtchedBorder(EtchedBorder.RAISED, null, null));
		contentPane.add(statusBarPanel, BorderLayout.SOUTH);
		statusBarPanel.setLayout(new GridLayout(0, 1, 0, 0));

		statusBarLabel = new JLabel("대기");
		statusBarPanel.add(statusBarLabel);
	} //상태표시바 생성 함수 끝
	
	//중앙 화면 생성
	private void createCenterScreen(){
		mainCenterPanel = new JPanel();
		mainCenterPanel.setBorder(new EtchedBorder(EtchedBorder.RAISED, null, null));
		contentPane.add(mainCenterPanel, BorderLayout.CENTER);
		mainCenterPanel.setLayout(new BorderLayout(0, 0));
		mainCenterTabbedPane = new JTabbedPane(JTabbedPane.TOP);
		
		//탭패인에 붙이기 위한 패널 생성
		JPanel panel = new JPanel();
		mainCenterTabbedPane.add(panel, BorderLayout.CENTER);
		panel.setLayout(new BorderLayout(0, 0));

		//스크롤패인 생성 후 패널에 담기
		JScrollPane scrollPane = new JScrollPane();
		panel.add(scrollPane, BorderLayout.CENTER);
		//컴퓨터 배치 화면 생성 후 스크롤패인에 담기
		computerScreen = new ComputerScreen(6);
		scrollPane.setViewportView(computerScreen);
		//탭패인에 패널 붙이기
		mainCenterTabbedPane.addTab("강의실 학생 PC 좌석", panel);
		//메인 중앙 패널에 탭패인 붙이기
		mainCenterPanel.add(mainCenterTabbedPane, BorderLayout.CENTER);
	} //중앙 화면 생성 함수 끝
	
	//접속자 목록 생성
	private void createConnectorList(){
		mainWestPanel = new JPanel();
		mainWestPanel.setBorder(new EtchedBorder(EtchedBorder.RAISED, null, null));
		contentPane.add(mainWestPanel, BorderLayout.WEST);
		mainWestPanel.setLayout(new BorderLayout(0, 0));
		//접속자 수
		JPanel numberOfConnectedStudentTitledPanel = new JPanel();
		numberOfConnectedStudentTitledPanel.setBorder(new TitledBorder(null, "접속자 수", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		mainWestPanel.add(numberOfConnectedStudentTitledPanel, BorderLayout.NORTH);
		numberOfConnectedStudentTitledPanel.setLayout(new GridLayout(0, 2, 0, 0));

		JPanel numberOfConnectedStudentLabelPanel = new JPanel();
		numberOfConnectedStudentLabelPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		numberOfConnectedStudentTitledPanel.add(numberOfConnectedStudentLabelPanel);

		JLabel numberOfConnectedStudentLabel = new JLabel("현재 연결된 접속자 수 : ");
		numberOfConnectedStudentLabelPanel.add(numberOfConnectedStudentLabel);
		
		numberOfConnectedStudentTextField = new JTextField();
		numberOfConnectedStudentTextField.setToolTipText("현재 연결된 접속자들의 수가 표시됩니다.");
		numberOfConnectedStudentTextField.setEditable(false);
		numberOfConnectedStudentTitledPanel.add(numberOfConnectedStudentTextField);
		numberOfConnectedStudentTextField.setColumns(10);
		//접속자 목록
		JPanel listOfConnectedStudentTitledPanel = new JPanel();
		listOfConnectedStudentTitledPanel.setBorder(new TitledBorder(null, "접속자 목록", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		mainWestPanel.add(listOfConnectedStudentTitledPanel, BorderLayout.CENTER);
		listOfConnectedStudentTitledPanel.setLayout(new BorderLayout(0, 0));

		JScrollPane listOfConnectedStudentScrollPane = new JScrollPane();
		listOfConnectedStudentTitledPanel.add(listOfConnectedStudentScrollPane, BorderLayout.CENTER);

		connectedStudentList = new JList<String>();
		connectedStudentList.setToolTipText("현재 연결된 접속자들의 목록이 표시됩니다.");
		connectedStudentList.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		listOfConnectedStudentScrollPane.setViewportView(connectedStudentList);
		connectedStudentList.setOpaque(false);
		//접속자들의 정보
		JPanel informationOfConnectedStudentTitledPanel = new JPanel();
		informationOfConnectedStudentTitledPanel.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "접속자의 개인정보 및 PC정보", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		mainWestPanel.add(informationOfConnectedStudentTitledPanel, BorderLayout.SOUTH);
		informationOfConnectedStudentTitledPanel.setLayout(new BorderLayout(0, 0));

		informationOfConnectedStudentList = new JList<String>();
		informationOfConnectedStudentList.setToolTipText("현재 접속자들의 개인정보 및 PC정보를 표시합니다.");
		informationOfConnectedStudentList.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		informationOfConnectedStudentList.setOpaque(false);
		JScrollPane informationOfConnectedStudentScrollPane = new JScrollPane(informationOfConnectedStudentList);
		informationOfConnectedStudentScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		informationOfConnectedStudentTitledPanel.add(informationOfConnectedStudentScrollPane, BorderLayout.CENTER);
	} //접속자 목록 생성 함수 끝
	
	//대화 목록 생성
	private void createChatList(){
		mainEastPanel = new JPanel();
		mainEastPanel.setBorder(new EtchedBorder(EtchedBorder.RAISED, null, null));
		contentPane.add(mainEastPanel, BorderLayout.EAST);
		mainEastPanel.setLayout(new BorderLayout(0, 0));

		//대화방 목록
		JPanel chatRoomTitledPanel = new JPanel();
		chatRoomTitledPanel.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "대화방 목록", 
										TitledBorder.LEADING, TitledBorder.TOP, null, null));
		mainEastPanel.add(chatRoomTitledPanel, BorderLayout.NORTH);
		chatRoomTitledPanel.setLayout(new BorderLayout(0, 0));

		chatRoomList = new JList<String>();
		chatRoomList.setToolTipText("생성된 대화방들의 목록입니다.");
		chatRoomList.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		chatRoomList.setOpaque(false);
		JScrollPane chatRoomScrollPane = new JScrollPane(chatRoomList);
		chatRoomTitledPanel.add(chatRoomScrollPane, BorderLayout.CENTER);

		//대화 내용 목록
		JPanel contentOfChattingTitledPanel = new JPanel();
		contentOfChattingTitledPanel.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "대화 목록", 
												TitledBorder.LEADING, TitledBorder.TOP, null, null));
		mainEastPanel.add(contentOfChattingTitledPanel, BorderLayout.CENTER);
		contentOfChattingTitledPanel.setLayout(new BorderLayout(0, 0));

		contentOfChattingTextPane = new JTextPane();
		contentOfChattingTextPane.setToolTipText("대화 목록이 표시됩니다.");
		contentOfChattingTextPane.setEditable(false);
		contentOfChattingTextPane.setSize(50, 100);

		JScrollPane contentOfChattingScrollPane = new JScrollPane(contentOfChattingTextPane, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, 
																	ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		contentOfChattingTitledPanel.add(contentOfChattingScrollPane, BorderLayout.CENTER);
		
		//대화 내용 입력
		JPanel inputTextPanel = new JPanel();
		inputTextPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		contentOfChattingTitledPanel.add(inputTextPanel, BorderLayout.SOUTH);

		GridBagLayout gbl_inputTextPanel = new GridBagLayout();
		gbl_inputTextPanel.columnWidths = new int[]{116, 116, 116, 0, 0};
		gbl_inputTextPanel.rowHeights = new int[]{23, 0};
		gbl_inputTextPanel.columnWeights = new double[]{0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_inputTextPanel.rowWeights = new double[]{0.0, Double.MIN_VALUE};
		inputTextPanel.setLayout(gbl_inputTextPanel);

		GridBagConstraints gbc_connectedStudentComboBox = new GridBagConstraints();
		Vector<String> userlist = new Vector<String>();
		userlist.add("모두에게");	//기본적으로 모두에게 보내게 설정
		connectedStudentComboBox = new JComboBox<String>(userlist);
		gbc_connectedStudentComboBox.fill = GridBagConstraints.BOTH;
		gbc_connectedStudentComboBox.anchor = GridBagConstraints.WEST;
		gbc_connectedStudentComboBox.insets = new Insets(0, 0, 0, 5);
		gbc_connectedStudentComboBox.gridx = 0;
		gbc_connectedStudentComboBox.gridy = 0;
		inputTextPanel.add(connectedStudentComboBox, gbc_connectedStudentComboBox);

		inputTextField = new JTextField();
		GridBagConstraints gbc_inputTextField = new GridBagConstraints();
		gbc_inputTextField.gridwidth = 2;
		gbc_inputTextField.fill = GridBagConstraints.BOTH;
		gbc_inputTextField.insets = new Insets(0, 0, 0, 5);
		gbc_inputTextField.gridx = 1;
		gbc_inputTextField.gridy = 0;
		inputTextPanel.add(inputTextField, gbc_inputTextField);
		inputTextField.setColumns(10);

		sendTextButton = new JButton("보내기");  
		GridBagConstraints gbc_sendTextButton = new GridBagConstraints();
		gbc_sendTextButton.anchor = GridBagConstraints.EAST;
		gbc_sendTextButton.gridx = 3;
		gbc_sendTextButton.gridy = 0;
		inputTextPanel.add(sendTextButton, gbc_sendTextButton);
	} //대화 목록 생성 함수 끝
}